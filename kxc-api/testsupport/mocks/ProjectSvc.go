// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	context "context"

	requests "github.com/didil/kubexcloud/kxc-api/requests"
	mock "github.com/stretchr/testify/mock"

	responses "github.com/didil/kubexcloud/kxc-api/responses"
)

// ProjectSvc is an autogenerated mock type for the ProjectSvc type
type ProjectSvc struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, userName, reqData
func (_m *ProjectSvc) Create(ctx context.Context, userName string, reqData *requests.CreateProject) error {
	ret := _m.Called(ctx, userName, reqData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *requests.CreateProject) error); ok {
		r0 = rf(ctx, userName, reqData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, userName, projectName
func (_m *ProjectSvc) Get(ctx context.Context, userName string, projectName string) (*responses.Project, error) {
	ret := _m.Called(ctx, userName, projectName)

	var r0 *responses.Project
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *responses.Project); ok {
		r0 = rf(ctx, userName, projectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userName, projectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, userName
func (_m *ProjectSvc) List(ctx context.Context, userName string) (*responses.ListProject, error) {
	ret := _m.Called(ctx, userName)

	var r0 *responses.ListProject
	if rf, ok := ret.Get(0).(func(context.Context, string) *responses.ListProject); ok {
		r0 = rf(ctx, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.ListProject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
